#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:yaml", "yaml")
#@ load("/helpers.star", "is_any_profile_enabled", "is_package_enabled", "profiles")

#@ if is_package_enabled("contour"):

#@ def compute_package_values():
#@   values = struct.decode(data.values.contour)
#@
#@   if is_package_enabled("cert-manager"):
#@     if not hasattr(data.values.contour, "certificates") or not hasattr(data.values.contour.certificates, "useCertManager"):
#@       values["certificates"] = {}
#@       values["certificates"]["useCertManager"] = True
#@     end
#@   end
#@
#@   if not hasattr(data.values.contour, "infrastructure_provider"):
#@     values["infrastructure_provider"] = data.values.platform.infrastructure_provider
#@   end
#@
#@   return struct.encode(values)
#@ end

---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: contour
  namespace: #@ data.values.platform.namespace
  annotations:
    kapp.k14s.io/change-group: contour
    kapp.k14s.io/change-rule.cert-manager: upsert after upserting cert-manager
    kapp.k14s.io/change-rule.serviceaccount: delete before deleting serviceaccount
spec:
  serviceAccountName: kadras-install-sa
  packageRef:
    refName: contour.packages.kadras.io
    versionSelection:
      constraints: 1.29.0
  values:
    - secretRef:
        name: contour-values
---
apiVersion: v1
kind: Secret
metadata:
  name: contour-values
  namespace: #@ data.values.platform.namespace
stringData:
  values.yaml: #@ yaml.encode(compute_package_values())

#@ end