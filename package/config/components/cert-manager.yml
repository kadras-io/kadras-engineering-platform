#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:yaml", "yaml")
#@ load("/helpers.star", "is_any_profile_enabled", "is_package_enabled", "profiles")

#@ if is_package_enabled("cert-manager"):

#@ def is_letsencrypt_issuer(issuer):
#@   return issuer.type == "letsencrypt_staging" or issuer.type == "letsencrypt"
#@ end

#@ def is_letsencrypt_production(issuer):
#@   if issuer.type == "letsencrypt_staging":
#@     return False
#@   else:
#@     return True
#@   end
#@ end

#@ def compute_package_values():
#@   values = struct.decode(data.values.cert_manager)
#@
#@   if data.values.platform.ingress.issuer and is_letsencrypt_issuer(data.values.platform.ingress.issuer) and data.values.platform.ingress.issuer.email:
#@     if not hasattr(data.values.cert_manager, "letsencrypt") or not hasattr(data.values.cert_manager.letsencrypt, "include") or not data.values.cert_manager.letsencrypt.include:
#@       values["letsencrypt"] = {}
#@       values["letsencrypt"]["include"] = True
#@       values["letsencrypt"]["production"] = is_letsencrypt_production(data.values.platform.ingress.issuer)
#@       values["letsencrypt"]["email"] = data.values.platform.ingress.issuer.email
#@     end
#@   end
#@
#@   return struct.encode(values)
#@ end

---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: cert-manager
  namespace: #@ data.values.platform.namespace
  annotations:
    kapp.k14s.io/change-group: cert-manager
    kapp.k14s.io/change-rule.serviceaccount: delete before deleting serviceaccount
spec:
  serviceAccountName: kadras-install-sa
  packageRef:
    refName: cert-manager.packages.kadras.io
    versionSelection:
      constraints: 1.17.1
      prereleases: {}
  values:
    - secretRef:
        name: cert-manager-values
---
apiVersion: v1
kind: Secret
metadata:
  name: cert-manager-values
  namespace: #@ data.values.platform.namespace
stringData:
  values.yaml: #@ yaml.encode(compute_package_values())

#@ end