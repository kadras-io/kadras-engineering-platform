#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:yaml", "yaml")
#@ load("/helpers.star", "is_any_profile_enabled", "is_package_enabled", "profiles")

#@ if is_package_enabled("workspace-provisioner"):

#@ def compute_package_values():
#@   values = struct.decode(data.values.workspace_provisioner)
#@
#@   #! Compute values for OCI Registry server
#@   if data.values.platform.oci.pull_secret.name and data.values.platform.oci.pull_secret.namespace:
#@     if not hasattr(data.values.workspace_provisioner, "oci") or not hasattr(data.values.workspace_provisioner.oci, "pull_secret") or not hasattr(data.values.workspace_provisioner.oci.pull_secret, "name") or not hasattr(data.values.workspace_provisioner.oci.pull_secret, "namespace") or not data.values.workspace_provisioner.oci.pull_secret.name or not data.values.workspace_provisioner.oci.pull_secret.namespace:
#@       values["oci"] = {}
#@       values["oci"]["pull_secret"] = {}
#@       values["oci"]["pull_secret"]["name"] = data.values.platform.oci.pull_secret.name
#@       values["oci"]["pull_secret"]["namespace"] = data.values.platform.oci.pull_secret.namespace
#@     end
#@   end
#@
#@   #! Compute values for Cosign
#@   if data.values.platform.cosign.secret.name and data.values.platform.cosign.secret.namespace:
#@     if not hasattr(data.values.workspace_provisioner, "cosign") or not hasattr(data.values.workspace_provisioner.cosign, "secret") or not hasattr(data.values.workspace_provisioner.cosign.secret, "name") or not hasattr(data.values.workspace_provisioner.cosign.secret, "namespace") or not data.values.workspace_provisioner.cosign.secret.name or not data.values.workspace_provisioner.cosign.secret.namespace:
#@       values["cosign"] = {}
#@       values["cosign"]["secret"] = {}
#@       values["cosign"]["secret"]["name"] = data.values.platform.cosign.secret.name
#@       values["cosign"]["secret"]["namespace"] = data.values.platform.cosign.secret.namespace
#@     end
#@   end
#@
#@   #! Compute values for Git server
#@   if data.values.platform.git.server and data.values.platform.git.secret.name and data.values.platform.git.secret.namespace:
#@     if not hasattr(data.values.workspace_provisioner, "git") or not hasattr(data.values.workspace_provisioner.git, "server") or not hasattr(data.values.workspace_provisioner.git, "secret") or not hasattr(data.values.workspace_provisioner.cosign.secret, "name") or not hasattr(data.values.workspace_provisioner.cosign.secret, "namespace") or not data.values.workspace_provisioner.git.server or not data.values.workspace_provisioner.cosign.secret.name or not data.values.workspace_provisioner.cosign.secret.namespace:
#@       values["git"] = {}
#@       values["git"]["server"] = data.values.platform.git.server
#@       values["git"]["secret"] = {}
#@       values["git"]["secret"]["name"] = data.values.platform.git.secret.name
#@       values["git"]["secret"]["namespace"] = data.values.platform.git.secret.namespace
#@     end
#@   end
#@
#@   #! Compute values for namespaces
#@   if not hasattr(data.values.workspace_provisioner, "namespaces"):
#@     values["namespaces"] = [{"name": "default"}]
#@   end
#@
#@   return struct.encode(values)
#@ end

---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: workspace-provisioner
  namespace: #@ data.values.platform.namespace
  annotations:
    kapp.k14s.io/change-group: workspace-provisioner
    kapp.k14s.io/change-rule.secretgen-controller: upsert after upserting secretgen-controller
    kapp.k14s.io/change-rule.serviceaccount: delete before deleting serviceaccount
spec:
  serviceAccountName: kadras-install-sa
  packageRef:
    refName: workspace-provisioner.packages.kadras.io
    versionSelection:
      constraints: 0.4.0
  values:
    - secretRef:
        name: workspace-provisioner-values
---
apiVersion: v1
kind: Secret
metadata:
  name: workspace-provisioner-values
  namespace: #@ data.values.platform.namespace
stringData:
  values.yaml: #@ yaml.encode(compute_package_values())

#@ end
